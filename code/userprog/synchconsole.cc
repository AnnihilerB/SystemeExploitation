#ifdef CHANGED

#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
#include "synch.h"

static Semaphore *readAvail;
static Semaphore *writeDone;
static Semaphore *consoleUsed;

static void ReadAvailHandler(void *arg) {
  (void) arg; readAvail->V();
}

static void WriteDoneHandler(void*arg) {
  (void) arg; writeDone->V();
}

SynchConsole::SynchConsole(const char *in, const char *out){
  readAvail = new Semaphore("read avail", 0);
  writeDone = new Semaphore("write done", 0);
  consoleUsed = new Semaphore("console used", 1);
  console = new Console(in, out, ReadAvailHandler, WriteDoneHandler, 0);
}

SynchConsole::~SynchConsole() {
  delete console;
  delete consoleUsed;
  delete writeDone;
  delete readAvail;
}

void SynchConsole::SynchPutChar(int ch)
{
  consoleUsed->P();
  console->PutChar(ch);
  writeDone->P();
  consoleUsed->V();
}

int SynchConsole::SynchGetChar()
{
  consoleUsed->P();
  readAvail->P();
  int ch = console->GetChar();
  consoleUsed->V();
  return ch;
}

void SynchConsole::SynchPutString(const char s[])
{
  consoleUsed->P();
  int i = 0;
  while (s[i]!='\0'){
    console->PutChar(s[i]);
    writeDone->P();
    i++;
  }
  console->PutChar('\0');
  writeDone->P();
  consoleUsed->V();
}

int SynchConsole::SynchGetString(char *s, int n){
  consoleUsed->P();
  int i = 0;
  for (i = 0; i < n; i++){
    readAvail->P();
    char c = console->GetChar();
    if ((int)c == '\n'){
      s[i] = c;
      break;
    }
    if ((int)c == EOF){
      s[i] = '\0';
      break;
    }
    s[i] = c;
  }
  s[i+1] = '\0';
  consoleUsed->V();
  return i;
}

#endif // CHANGED
