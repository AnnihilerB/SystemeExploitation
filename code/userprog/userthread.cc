#ifdef CHANGED

#include <stdio.h>
#include "utility.h"
#include "system.h"
#include "synch.h"
#include "bitmap.h"

int nb_threads = 1;


static void StartUserThread(void *arg){
    //Récupération des arguments
    DEBUG('c', "Récupération des arguments...\n");
    int *arguments = (int*)arg;
    DEBUG('c',"Tableau arg = 0x%x\n", arguments);
    int fonction = arguments[0];
    DEBUG('c', "Adresse de la fonction 0x%x\n", arguments[0]);
    int parametre = arguments[1];
    DEBUG('c', "Adresse du parametre 0x%x\n", parametre);
    
    //DEBUG('c', "Initialisation des registres à 0...\n");
    for (int i = 0; i < NumTotalRegs; i++){
        machine->WriteRegister (i, 0);
    }
    //Initialisation des registres
    
    machine->WriteRegister(4, parametre);

    machine->WriteRegister (PCReg, fonction);
    machine->WriteRegister (NextPCReg, fonction + 4);

    DEBUG('c', "Allocation du pointeur de pile...\n");
    currentThread->space->AllocateUserStack(currentThread->num_allocation + 1);
    DEBUG('c', "Pointeur de pile alloué !\n");
    DEBUG('c', "Lancement de l'interpreteur...\n");
    free(arg);
    machine->Run();
    DEBUG('c', "Retour de l'interpreteur.\n");
}

int do_ThreadCreate(int f, int arg){
    currentThread->space->threadSem->P();
    int libre = currentThread->space->bitmap->Find();
    if (libre == -1){
        currentThread->space->threadSem->V();
        return -1;
    }
    nb_threads++;
    currentThread->space->threadSem->V();
    DEBUG('c', "Début de do_ThreadCreate, f : 0x%x\n", f);
    //Tableau servant à stocker les paramètres. Son adresse sera envoyée au thread.
    int *arguments = (int*)malloc(sizeof(int));
    DEBUG('c',"Tableau arg = 0x%x\n", &arguments);
    arguments[0] = f;
    DEBUG('c', "arguments[0] = 0x%x\n", arguments[0]);
    arguments[1] = arg;

    DEBUG('c', "Création du thread\n");
    Thread *newThread = new Thread("new Thread");
    newThread->num_allocation = libre;
    DEBUG('c', "Mise en liste d'attente\n");
    newThread->Start(StartUserThread, arguments);
    DEBUG('c', "Fin de do_ThreadCreate\n\n");
    return 1;
}



int do_ThreadExit(){
    currentThread->space->threadSem->P();
     if (currentThread->num_allocation != -1){
         currentThread->space->bitmap->Clear(currentThread->num_allocation);
     }
    if (nb_threads == 1){
        nb_threads--;
        currentThread->space->threadSem->V();
        interrupt->Halt();
    }
    else{
        nb_threads--;
        currentThread->space->threadSem->V();
        currentThread->Finish();
    }
    return 0;
}

#endif
